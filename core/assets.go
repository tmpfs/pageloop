// Code generated by go-bindata.
// sources:
// data/config.yml
// data/pageloop.txt
// data/schema/app-new.json
// DO NOT EDIT!

package core

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcd\x6a\xeb\x40\x0c\x85\xf7\x7e\x0a\xad\xee\xee\x62\x48\x29\x81\xd9\xf5\x67\xd3\x5d\x5e\x61\x32\x56\x9b\x81\xf1\x48\x48\x1a\x4a\xa0\x0f\x5f\x62\xa7\x8d\x4b\x3c\x89\x43\xbb\x33\x3a\x87\xf9\xbe\x48\xf1\x5d\x27\x0e\xdc\xdd\xfd\x7a\xdd\x70\xd9\xa6\xa8\x3b\x07\xc3\x47\x68\x94\x8a\x04\x74\xe0\x99\xdb\xa2\x28\x4d\x4f\x25\x1b\x53\xcc\xa6\xae\x01\xf8\xdf\x00\x00\x04\xca\xe6\x63\x46\x71\xa0\x7b\x35\xec\x87\x69\x91\xe4\xa0\x1d\x3e\xd9\xdb\x6e\x7c\x64\xcc\x5b\xec\xa2\x91\x8c\x61\x87\x1a\x24\xb2\x45\xca\x0e\x3e\x86\x11\xc0\x03\x73\x8a\xc1\x1f\x86\x30\x96\x17\xd1\xbc\x2a\x9a\x56\xa0\xd3\x70\x16\xfa\x44\x7d\x4f\x19\xc6\xde\x22\x5e\x47\xa1\x46\x3b\x45\xb3\xac\x67\x0a\xa5\xc7\x6c\xe3\x4f\xfc\x07\x3b\x4c\x0c\xaf\x31\xe1\x32\xb0\x11\x25\x6d\x3d\xc7\x76\x2b\xf4\xae\x28\x15\x8b\x4a\x6f\x7e\xe7\x9b\x17\x78\x1c\x5b\x37\x3a\xb0\xd0\x16\xaf\x1a\x4c\x5a\x55\xfe\xe6\xd0\x99\xa3\x1b\xf6\x9c\xbc\xe1\x94\x7f\x1c\x1d\x56\x3d\xec\xf2\xec\x14\xb5\xc6\xc5\x8b\x7c\xa3\x66\x2f\x71\xc9\xc3\x9f\xfe\xb4\xda\x72\x91\xb3\x95\x5c\x6b\x7e\xe5\x0e\x4c\x0a\xd6\x55\x37\x45\x10\x26\x6f\x4c\xad\x7e\x67\xbc\x5a\xae\xbc\xba\xdd\x79\xf5\x27\xd2\x29\xaa\xc5\xfc\x56\x35\xfd\x91\xcf\x9f\x3a\x0a\x06\x23\xd9\xc3\xb1\xdb\x7c\x06\x00\x00\xff\xff\xca\xd0\xf3\xf7\x05\x05\x00\x00")

func configYmlBytes() ([]byte, error) {
	return bindataRead(
		_configYml,
		"config.yml",
	)
}

func configYml() (*asset, error) {
	bytes, err := configYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yml", size: 1285, mode: os.FileMode(436), modTime: time.Unix(1504920317, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageloopTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x6a\x33\x31\x0c\x84\xef\x7e\x8a\x39\xfe\x3f\x74\x73\x29\x25\x10\x92\x40\x69\x8f\x29\x2d\x94\x52\xca\x92\x83\xb2\xd6\x66\x05\x8e\x6d\x2c\x67\x69\xde\xbe\xd8\xbb\x29\xa4\x3a\x49\x68\x66\xf8\xa4\x0f\xa5\x23\xaf\x10\xe9\xc8\x2e\x84\x88\xb6\x19\xf6\x68\x9b\x66\x60\x17\x6b\x33\x72\x52\x09\xbe\xf6\x64\x6d\xda\xac\x47\x72\xdb\x3a\x76\xc1\xf7\x72\xdc\xac\x7b\x71\xbc\xdd\x1b\x03\x3c\x05\xe7\xe8\x10\x12\x65\x19\x19\x89\xc9\x65\x39\x31\x94\xd3\xc8\x69\x51\x14\x9f\x7c\x98\x47\xe4\x81\xf2\xd4\x2b\xf4\xa2\x99\x4f\xa0\x18\x9d\x74\x94\x25\x78\x05\x79\x6b\x80\x3c\x04\x65\x68\xe4\x4e\x7a\x61\x0b\xf1\xc8\x03\x43\xcf\x45\xca\x16\x13\xc4\x39\x55\x13\x0a\xca\xc2\x98\xd7\x58\x23\x0c\xd0\xd0\x1d\x66\xf0\x76\x24\xb7\xc7\x5c\xef\x9c\x6b\xce\x41\xbc\x45\x59\xb3\x2a\xfe\x59\xee\xe9\xec\xf2\x0a\xab\xfb\x87\xe5\xf2\x7f\xf1\x77\xc5\x3f\x5f\xda\x96\xf8\x29\x62\x17\xc8\x5e\x0f\xf9\x83\x90\xc2\x09\x84\xaf\xc7\x97\x5d\xc5\x29\x21\x43\x09\x29\x2f\xc5\x4d\x3d\x8b\x46\x47\x17\xd4\x0d\x79\x0b\xfe\x96\x5c\xf4\xd7\xaf\xdf\xca\xf1\x96\xc4\x4f\xd8\xd7\xfd\xaf\xc9\xfc\x04\x00\x00\xff\xff\x27\x49\x03\x1e\xc9\x01\x00\x00")

func pageloopTxtBytes() ([]byte, error) {
	return bindataRead(
		_pageloopTxt,
		"pageloop.txt",
	)
}

func pageloopTxt() (*asset, error) {
	bytes, err := pageloopTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pageloop.txt", size: 457, mode: os.FileMode(436), modTime: time.Unix(1505021523, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaAppNewJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x31\x0e\xc2\x30\x0c\x45\xe7\xe4\x14\xd6\x9f\x7b\x82\x9e\x82\x1d\x31\x84\xc6\x20\xa3\x36\x09\x8e\x19\x50\x95\xbb\x23\x8b\x85\x0e\x6c\xcf\xf2\xd3\xb3\xf7\x18\xd0\xb4\x36\x56\x13\xee\x98\x69\x8f\x21\xa0\xa4\x8d\x9d\x61\xef\xe6\x80\x6e\x2a\xe5\x8e\x31\xf9\x36\x73\x5f\x54\x9a\x49\x2d\x7f\x24\x22\x22\x18\x6f\x6d\x4d\x76\x0c\xd5\xeb\x83\x17\xc3\x88\xc1\x5b\x50\x7e\xbe\x44\x39\x63\xa6\xf3\xf7\xea\x44\x87\xfe\xc5\xad\x94\xb3\xf8\x94\xd6\xd3\xef\xab\xb7\xb4\x76\x8e\x23\x7e\x02\x00\x00\xff\xff\x96\x1b\x17\x90\xc4\x00\x00\x00")

func schemaAppNewJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaAppNewJson,
		"schema/app-new.json",
	)
}

func schemaAppNewJson() (*asset, error) {
	bytes, err := schemaAppNewJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/app-new.json", size: 196, mode: os.FileMode(436), modTime: time.Unix(1504670449, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.yml": configYml,
	"pageloop.txt": pageloopTxt,
	"schema/app-new.json": schemaAppNewJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.yml": &bintree{configYml, map[string]*bintree{}},
	"pageloop.txt": &bintree{pageloopTxt, map[string]*bintree{}},
	"schema": &bintree{nil, map[string]*bintree{
		"app-new.json": &bintree{schemaAppNewJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

