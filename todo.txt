Wow, so much to do, here is some stuff:

1) Fix quick delete in sidebar, requires addition of an Alert component
   to confirm the file deletion.

	 Implementation: 08f9c5f9921688fcb0f84e1711c05117c50e08d8

2) Recognise parent directories. When creating or moving files any intermediary
   parent directories are not shown in the file list, we need to create File
   instances for intermediary directories.
3) Add missing documentation files.
4) Sketch settings/preferences view.
5) Update apps view to hide system applications by default and allow showing
   them.
6) Update new file template API to use an object like creating an app from a
   template and remove the use of a MIME type.

   Implementation: 88ceed3f8a32fc37121ad2d1e3cc7edd7d8c303d

7) Add ability to choose application template when creating new apps.
8) Add confirmation when deleting apps.

	 Implementation: 08f9c5f9921688fcb0f84e1711c05117c50e08d8

9) Improve home page layout and content.
10 Investigate resize issues:

   * When dragging the preview pane to zero width and expanding again sometimes
     the scroll stops working on the iframe - refreshing the iframe content appears
     to fix the issue but maybe setting window.scrollTo(0,0) might be enough.
   * Sometimes the codemirror instance scrollbars get stuck after dragging and resizing.
     Subsequently scrolling the codemirror instance fixes the issue but we should do this
     automatically after a resize.

11) Support recursively deleting folders - os.RemoveAll().
12) Consider showing file dirty status in files list.
13) Design system for multiple open documents - tabs or dropdown quick switcher. Tabs are
    traditional but we don't have so much screen space so maybe a dropdown is better.
14) Improve data editor and allow syncing the data source (RPC API?). How to maintain key
    order when serializing back to YAML/JSON?
15) Make editing the source code more realtime. Allow the server to make changes to the file
    in-memory based on the codemirror editor changes and send out push events to those viewing
    the file so they can see the changes.
16) Design visual editor - still not sure the best way to do this, but I think it will be a
    combination or elements and components. Where elements are simple components representing
    the built in HTML elements and components are custom extensions that can be added to the
    document. The visual editor would operate on user interfaces exposed by each component to
    update the component. The visual editor should support an outline of the document in a sidebar
    to get a glimpse of the document structure and dragging elements/components into the document
    to add new components.
17) Support file upload via drag and drop and click to select, requires that we know the target
    directory. Maybe easiest if they are dragged directly on to a folder in the files list
    rather than creating a separate view for browsing directories although eventually both
    should be supported. Can add an upload area to the file info for directories also.
18) Consider bitmap/svg editor interfaces.
19) Consider how to automatically create thumbnails on image upload.
20) Consider normalizing file names on upload, most users do unusual stuff like
    "My Document With Lots of Spaces" which is not conducive to clean URLs, consider
    normalizing the name for URL reference but maintaining a raw name for display purposes.
21) Refactor editor code to use webpack, babel and vue components.

    Implementation: vue (tagged after big refactor from the first rapid prototype iteration)

22) [[[Fix golang test specs]]]
23) Support list of media files in sidebar.
24) Consider how we can support build tasks, CSS preprocessors and Javascript compilers.
    The current thinking is that we run a node.js service and invoke that from the main
    pageloop service to perform conversion/compilation etc as the node.js ecosystem already
    has all the tools that people are used to.
25) Consider `makestatic` integration for optimization and publishing.
26) Fix loading/referencing files bundled with the executable. Remove bindata integration?

    Implementation: vue

    Moved bundled apps outside of the data directory so they are not included in the executable,
    still need to work out a good way of distributing/bundling the system applications.

    HTTPS download of .zip archives on first run seems like the best solution.

27) Add Docker integration.
28) Support notifications for better displaying errors and other messages.

		* Requires support for error message/styling
		* Handle long messages - scroll?
		* Integrate with all current actions that require notifications

		Implementation: f30d898fb3f05def8f179bfa8ea6511af9154846

29) Implement shell/terminal style interface using RPC API over websockets.
30) Remove support for `directory` when creating apps from templates.

		Implementation: cc7d2dc85ccfd00da4fc181bd9b7cb5d3825a6d8

31) Implement quick app context switching - update app title component to show list of apps.
32) Consider translation support.

		* Little like gettext without the additional wrapper function
		* Translate from primary language
		* Extract text nodes from HTML documents and strings in the page meta data
		* Present gettext style primary -> new language editor

33) Generate link reports, broken links etc.
34) Validate generated markup - java + nu-validator :(
35) Document size switching component for the preview area, eg: 320x480 ...
36) Handle large files, do not load into memory, mark as external and serve from disc
37) Set default stylesheet for markdown documents with no layout, looks pretty ugly
    using the default user agent stylesheet :(
38) Live markdown compilation on the client to update the preview area.
39) Sort file lists client side to match server listing?
40) Do not reload the entire pages/file lists on add, update, move etc.
41) Do not open binary files in source code editor

    Implementation: 8426744a8395b884c212c31a464b87fd2d893462

    TODO: preview of binary files displayed by the browser, eg: png, jpg, pdf, gif etc

42) Import/export from zip archive
43) Add tips/hints for sidebar file upload
44) Support deleting multiple selected files
45) File upload documentation
46) Standardize public/source directories for all apps
47) Add Electron build for the editor, bundle a standalone server executable
48) Deprecate loading page data from external files - frontmatter data only
49) Cancel new file view on ESC key
